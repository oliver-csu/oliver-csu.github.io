<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计算机软件的发展</title>
    <url>/2024/09/19/20240919-03.html</url>
    <content><![CDATA[<h1 id="计算机软件的发展"><a href="#计算机软件的发展" class="headerlink" title="计算机软件的发展"></a>计算机软件的发展</h1><ol>
<li>汇编语言阶段（20世纪50年代）</li>
<li>程序批处理阶段（20世纪60年代）</li>
<li>分时多用户阶段（20世纪70年代）</li>
<li>分布式管理阶段（20世纪80年代）</li>
<li>软件重用阶段（20世纪90年代）</li>
<li>Web服务阶段（21世纪初至今）</li>
</ol>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的发展历程</title>
    <url>/2024/09/19/20240919-02.html</url>
    <content><![CDATA[<h1 id="计算机系统的组成"><a href="#计算机系统的组成" class="headerlink" title="计算机系统的组成"></a>计算机系统的组成</h1><ul>
<li>硬件（裸机）</li>
<li>操作系统（OS）</li>
<li>应用程序</li>
<li>用户</li>
</ul>
<p><img src="/./assets/20240919/7ac4874c03f64de9ba65a042d2947a76.png" alt="计算机系统"></p>
<p>操作系统和应用程序统称为软件，系统软件主要包括：</p>
<ul>
<li>操作系统</li>
<li>语言处理程序</li>
<li>数据库管理系统</li>
<li>分布式软件系统</li>
<li>网络软件系统</li>
<li>各种服务软件</li>
</ul>
<h1 id="计算机硬件的发展"><a href="#计算机硬件的发展" class="headerlink" title="计算机硬件的发展"></a>计算机硬件的发展</h1><ol>
<li>电子管时代（1946-1959）</li>
<li>晶体管时代（1959-1964）</li>
<li>中小规模集成电路时代（1964-1975）</li>
<li>超大规模集成电路时代（1975-1990）</li>
<li>超级规模集成电路时代（1990-现在）</li>
</ol>
<p>1946年02月15日，诞生了第一台计算机，称为：ENIAC（Electronic Numerical Integrator and Computer）。</p>
<p><img src="/./assets/20240919/be2eb7263f694464946d4ee5a97752d6.png" alt="ENIAC"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2024/09/19/20240919-01.html</url>
    <content><![CDATA[<h1 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h1><ul>
<li>本课程为计算机专业学生量身定制，既可用于学习《计算机组成原理》相关知识，也可用于考研复习。内容包括：计算机系统概述、数据的表示和运算、存储系统、指令系统、中央处理器、总线、输入&#x2F;输出系统等章节。内容力求精炼、重点突出、条理清晰、深入浅出。本课程精选历年考研真题，给出详细的解题思路和部分答案，达到讲练结合、灵活掌握、举一反三的效果。</li>
<li>本课程对学习《操作系统》、《计算机网络》课程大有帮助，可以作为其辅导课程。</li>
</ul>
<h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><ol>
<li>掌握计算机组成一般原理，理解形成计算机的整体概念</li>
<li>掌握数的表示和运算，理解进制、精度、溢出、转换等概念</li>
<li>理解存储器的分类、特点和扩展，掌握Cache的相关计算和替换算法</li>
<li>理解指令、地址及相关概念，掌握指令的格式、寻址方式和有关计算</li>
<li>理解CPU、数据通路的基本功能和结构，掌握控制器的功能和工作原理，掌握指令流水线的基本实现</li>
<li>理解总线的概念、分类、组成和性能指标，掌握总线仲裁、操作、定时方式</li>
<li>理解输入、输出的概念，能够识别常见的IO设备，掌握IO控制器的功能和结构，掌握IO相关计算，掌握中断的各种原理和特点</li>
</ol>
<h1 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h1><ul>
<li>0基础学习计算机专业知识的学员</li>
<li>复习计算机基础知识的学员（建议学习者具备一定的C&#x2F;C++、Python、Java、Go等任意编程语言的编码经验）</li>
</ul>
<h1 id="课程亮点"><a href="#课程亮点" class="headerlink" title="课程亮点"></a>课程亮点</h1><ol>
<li>必知必会：本课程是软件开发人员“必知必会”的计算机基础知识，同时包含了大量的常见面试题，请务必认真学习；</li>
<li>体系完整：本课程共包含七章，包括计算机系统概述、数据的表示和运算、存储系统、指令系统、中央处理器、总线、输入&#x2F;输出系统等章节，涵盖计算机组成的整体概念和一般原理，是学习计算机组成的不二之选；</li>
<li>权威参考：以唐朔飞老师《计算机组成原理》（第3版）为蓝本，所有知识以该教材为准——懂得都懂；</li>
<li>由浅入深：为适应初学者&#x2F;零基础学员的学习需要，调整了部分知识的讲解次序，循序渐进的理解知识；采用自然语言，增加了许多现实世界的例子，更加通俗易懂；</li>
<li>真题直达：课程中增加了许多历年考研真题，让学习者感受真实考场，手把手带你解析真题；课程还包含部分真实的职场面试题，让你面试无忧。</li>
</ol>
<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h2><h3 id="1-1-计算机系统概述"><a href="#1-1-计算机系统概述" class="headerlink" title="1.1 计算机系统概述"></a>1.1 计算机系统概述</h3><ul>
<li><a href="/2024/09/19/20240919-02.html">计算机的发展历程</a></li>
<li><a href="/2024/09/19/20240919-03.html">计算机软件的发展</a></li>
<li><a href="/2024/09/19/20240919-04.html">计算机的分类与发展方向</a></li>
</ul>
<h3 id="1-2-计算机系统层次结构"><a href="#1-2-计算机系统层次结构" class="headerlink" title="1.2 计算机系统层次结构"></a>1.2 计算机系统层次结构</h3><ul>
<li>计算机系统的组成</li>
<li>计算机硬件的基本组成</li>
<li>计算机软件的分类</li>
<li>计算机的工作过程</li>
<li>计算机系统的多层次结构</li>
</ul>
<h3 id="1-3-计算机的性能指标"><a href="#1-3-计算机的性能指标" class="headerlink" title="1.3 计算机的性能指标"></a>1.3 计算机的性能指标</h3><ul>
<li>计算机的主要性能指标</li>
<li>几个专业术语</li>
</ul>
<h2 id="第二章-数据的表示和运算"><a href="#第二章-数据的表示和运算" class="headerlink" title="第二章 数据的表示和运算"></a>第二章 数据的表示和运算</h2><h3 id="2-1-数制和编码"><a href="#2-1-数制和编码" class="headerlink" title="2.1 数制和编码"></a>2.1 数制和编码</h3><ul>
<li>进位计数制及其相互转换</li>
<li>真值和机器数</li>
<li>BCD码</li>
<li>字符与字符串</li>
<li>校验码</li>
</ul>
<h3 id="2-2-定点数的表示与运算"><a href="#2-2-定点数的表示与运算" class="headerlink" title="2.2 定点数的表示与运算"></a>2.2 定点数的表示与运算</h3><ul>
<li>定点数的表示</li>
<li>定点数的运算</li>
<li>C语言中的整数类型及类型转换</li>
<li>数据的存储和排列</li>
</ul>
<h3 id="2-3-浮点数的表示与运算"><a href="#2-3-浮点数的表示与运算" class="headerlink" title="2.3 浮点数的表示与运算"></a>2.3 浮点数的表示与运算</h3><ul>
<li>浮点数的表示</li>
<li>浮点数的加减运算</li>
</ul>
<h3 id="2-4-算数逻辑单元（ALU）"><a href="#2-4-算数逻辑单元（ALU）" class="headerlink" title="2.4 算数逻辑单元（ALU）"></a>2.4 算数逻辑单元（ALU）</h3><ul>
<li>串行加法器和并行加法器</li>
<li>算数逻辑单元的功能和结构</li>
</ul>
<h2 id="第三章-存储系统"><a href="#第三章-存储系统" class="headerlink" title="第三章 存储系统"></a>第三章 存储系统</h2><h3 id="3-1-存储器概述"><a href="#3-1-存储器概述" class="headerlink" title="3.1 存储器概述"></a>3.1 存储器概述</h3><ul>
<li>存储器的分类</li>
<li>存储器的性能指标</li>
</ul>
<h3 id="3-2-存储器的层次化结构"><a href="#3-2-存储器的层次化结构" class="headerlink" title="3.2 存储器的层次化结构"></a>3.2 存储器的层次化结构</h3><ul>
<li>多级存储系统</li>
</ul>
<h3 id="3-3-半导体随机存储器"><a href="#3-3-半导体随机存储器" class="headerlink" title="3.3 半导体随机存储器"></a>3.3 半导体随机存储器</h3><ul>
<li>SRAM和DRAM</li>
<li>只读存储器</li>
<li>主存储器的基本组成</li>
</ul>
<h3 id="3-4-主存储器与CPU的连接"><a href="#3-4-主存储器与CPU的连接" class="headerlink" title="3.4 主存储器与CPU的连接"></a>3.4 主存储器与CPU的连接</h3><ul>
<li>连接原理</li>
<li>主存容量的扩展</li>
<li>存储芯片的地址分配和片选</li>
<li>存储器与CPU的连接</li>
</ul>
<h3 id="3-5-双端口RAM和多模块存储器"><a href="#3-5-双端口RAM和多模块存储器" class="headerlink" title="3.5 双端口RAM和多模块存储器"></a>3.5 双端口RAM和多模块存储器</h3><ul>
<li>双端口RAM</li>
<li>多模块存储器</li>
</ul>
<h3 id="3-6-高速缓冲存储器"><a href="#3-6-高速缓冲存储器" class="headerlink" title="3.6 高速缓冲存储器"></a>3.6 高速缓冲存储器</h3><ul>
<li>程序访问的局部性原理</li>
<li>Cache的基本工作原理</li>
<li>Cache和主存的映射方式</li>
<li>Cache中主存块的替换算法</li>
<li>Cache写策略</li>
</ul>
<h3 id="3-7-虚拟存储器"><a href="#3-7-虚拟存储器" class="headerlink" title="3.7 虚拟存储器"></a>3.7 虚拟存储器</h3><ul>
<li>虚拟存储器的基本概念</li>
<li>页式虚拟存储器</li>
<li>加快地址转换：快表（TLB）</li>
<li>段式虚拟存储器</li>
<li>段页式虚拟存储器</li>
<li>虚拟存储器与Cache的比较</li>
</ul>
<h2 id="第四章-指令系统"><a href="#第四章-指令系统" class="headerlink" title="第四章 指令系统"></a>第四章 指令系统</h2><h3 id="4-1-指令格式"><a href="#4-1-指令格式" class="headerlink" title="4.1 指令格式"></a>4.1 指令格式</h3><ul>
<li>指令的基本格式</li>
<li>定长操作码指令格式</li>
<li>扩展操作码指令格式</li>
</ul>
<h3 id="4-2-指令的寻址方式"><a href="#4-2-指令的寻址方式" class="headerlink" title="4.2 指令的寻址方式"></a>4.2 指令的寻址方式</h3><ul>
<li>指令的寻址和数据寻址</li>
<li>常见的数据寻址方式</li>
<li>X86汇编指令入门</li>
</ul>
<h3 id="4-3-CISC和RICS的基本概念"><a href="#4-3-CISC和RICS的基本概念" class="headerlink" title="4.3 CISC和RICS的基本概念"></a>4.3 CISC和RICS的基本概念</h3><ul>
<li>复杂指令系统计算机（CISC）</li>
<li>精简指令系统计算机（RISC）</li>
<li>CISC和RISC的比较</li>
</ul>
<h2 id="第五章-中央处理器"><a href="#第五章-中央处理器" class="headerlink" title="第五章 中央处理器"></a>第五章 中央处理器</h2><h3 id="5-1-CPU的功能和基本结构"><a href="#5-1-CPU的功能和基本结构" class="headerlink" title="5.1 CPU的功能和基本结构"></a>5.1 CPU的功能和基本结构</h3><ul>
<li>CPU的功能</li>
<li>CPU的基本结构</li>
</ul>
<h3 id="5-2-指令执行过程"><a href="#5-2-指令执行过程" class="headerlink" title="5.2 指令执行过程"></a>5.2 指令执行过程</h3><ul>
<li>指令周期</li>
<li>指令周期的数据流</li>
<li>指令执行方案</li>
</ul>
<h3 id="5-3-数据通路的功能和基本结构"><a href="#5-3-数据通路的功能和基本结构" class="headerlink" title="5.3 数据通路的功能和基本结构"></a>5.3 数据通路的功能和基本结构</h3><ul>
<li>数据通路的功能</li>
<li>数据通路的基本结构</li>
</ul>
<h3 id="5-4-控制的功能和工作原理"><a href="#5-4-控制的功能和工作原理" class="headerlink" title="5.4 控制的功能和工作原理"></a>5.4 控制的功能和工作原理</h3><ul>
<li>控制器的结构和功能</li>
<li>硬布线控制器</li>
<li>微程序控制器</li>
</ul>
<h3 id="5-5-指令流水线"><a href="#5-5-指令流水线" class="headerlink" title="5.5 指令流水线"></a>5.5 指令流水线</h3><ul>
<li>指令流水线的基本概念</li>
<li>流水线的分类</li>
<li>影响流水线的因素</li>
<li>流水线的性能指标</li>
<li>超标量流水线的基本概念</li>
</ul>
<h2 id="第六章-总线"><a href="#第六章-总线" class="headerlink" title="第六章 总线"></a>第六章 总线</h2><h3 id="6-1-总线概述"><a href="#6-1-总线概述" class="headerlink" title="6.1 总线概述"></a>6.1 总线概述</h3><ul>
<li>总线基本概念</li>
<li>总线的分类</li>
<li>系统总线的结构</li>
<li>总线的性能指标</li>
</ul>
<h3 id="6-2-总线仲裁"><a href="#6-2-总线仲裁" class="headerlink" title="6.2 总线仲裁"></a>6.2 总线仲裁</h3><ul>
<li>集中仲裁方式</li>
<li>分布仲裁方式</li>
</ul>
<h3 id="6-3-总线操作和定时"><a href="#6-3-总线操作和定时" class="headerlink" title="6.3 总线操作和定时"></a>6.3 总线操作和定时</h3><ul>
<li>总线传输的四个阶段</li>
<li>同步定时方式</li>
<li>异步定时方式</li>
</ul>
<h3 id="6-4-总线标准"><a href="#6-4-总线标准" class="headerlink" title="6.4 总线标准"></a>6.4 总线标准</h3><ul>
<li>常见的总线标准</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的分类与发展方向</title>
    <url>/2024/09/19/20240919-04.html</url>
    <content><![CDATA[<h1 id="电子计算机的分类"><a href="#电子计算机的分类" class="headerlink" title="电子计算机的分类"></a>电子计算机的分类</h1><h2 id="处理信号不同"><a href="#处理信号不同" class="headerlink" title="处理信号不同"></a>处理信号不同</h2><h3 id="模拟计算机"><a href="#模拟计算机" class="headerlink" title="模拟计算机"></a>模拟计算机</h3><ul>
<li>模拟信号：电磁波</li>
<li>连续的</li>
</ul>
<p><img src="/./assets/20240919/8e0b679ade4f42e8b4f1d0b885347bae.png" alt="模拟信号"></p>
<h3 id="数字计算机"><a href="#数字计算机" class="headerlink" title="数字计算机"></a>数字计算机</h3><ul>
<li>数字信号：电信号</li>
<li>非连续的</li>
</ul>
<p><img src="/./assets/20240919/a7030bd93c74417ba2096a9d3cd219a5.png" alt="数字信号"></p>
<h2 id="用途不同"><a href="#用途不同" class="headerlink" title="用途不同"></a>用途不同</h2><h3 id="专用计算机"><a href="#专用计算机" class="headerlink" title="专用计算机"></a>专用计算机</h3><ul>
<li>特定任务</li>
<li>效率高</li>
<li>适应性差</li>
</ul>
<h3 id="通用计算机"><a href="#通用计算机" class="headerlink" title="通用计算机"></a>通用计算机</h3><ul>
<li>任何任务</li>
<li>效率低</li>
<li>经济性差</li>
<li>适应性强</li>
</ul>
<p>通用计算机再细分为：</p>
<ul>
<li>巨型机</li>
<li>大型机</li>
<li>中型机</li>
<li>小型机</li>
<li>微机</li>
<li>单片机</li>
</ul>
<h1 id="计算机的展望"><a href="#计算机的展望" class="headerlink" title="计算机的展望"></a>计算机的展望</h1><p>未来计算机的发展会变得两极分化。</p>
<h2 id="一极：微型机"><a href="#一极：微型机" class="headerlink" title="一极：微型机"></a>一极：微型机</h2><ul>
<li>微型化</li>
<li>网络化</li>
<li>高性能</li>
<li>多用途（多媒体应用）</li>
</ul>
<h2 id="一极：巨型机"><a href="#一极：巨型机" class="headerlink" title="一极：巨型机"></a>一极：巨型机</h2><ul>
<li>巨型化</li>
<li>超高速</li>
<li>并行处理</li>
<li>智能化</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统的组成</title>
    <url>/2024/09/19/20240919-05.html</url>
    <content><![CDATA[<h1 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h1><p>计算机的最基本组成就是使用总线将各个组件连起来：</p>
<ul>
<li>输入设备</li>
<li>输出设备</li>
<li>存储器</li>
<li>运算器</li>
<li>控制器</li>
</ul>
<p><img src="/./assets/20240919/b1b586c0c73b4580acd4d0510d448b09.png" alt="计算机硬件基本组成"></p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p><img src="/./assets/20241008/85e9b44dbd7f459f982569c503c5d6f7.png" alt="存储器"></p>
<h2 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h2><p><img src="/./assets/20241008/f5dbefcbb320401cad79c3ce1f6ed920.png" alt="运算器"></p>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p><img src="/./assets/20241008/27fcbd169acb46e8a8dc4252bc166f0b.png" alt="控制器"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与数据结构基础班</title>
    <url>/2024/09/20/20240920-01.html</url>
    <content><![CDATA[<h1 id="章节1-认识复杂度、对数器、二分法与异或运算-20节"><a href="#章节1-认识复杂度、对数器、二分法与异或运算-20节" class="headerlink" title="章节1: 认识复杂度、对数器、二分法与异或运算 (20节)"></a>章节1: 认识复杂度、对数器、二分法与异或运算 (20节)</h1><ul>
<li>什么是算法数据结构</li>
<li>何为常数时间的操作</li>
<li>常见的常数时间操作</li>
<li>时间复杂度的意义</li>
<li>选择排序</li>
<li>冒泡排序</li>
<li>插入排序</li>
<li>额外空间复杂度</li>
<li>面试、比赛、刷题中、一个问题的最优解是什么意思</li>
<li>常见的时间复杂度</li>
<li>算法和数据结构学习的大脉络</li>
<li>什么叫对数器</li>
<li>什么叫二分法</li>
<li>在一个有序数组中，找&#x3D;某个数的最左侧位置</li>
<li>局部最小值</li>
<li>认识异或运算</li>
<li>如何不用额外变量交换两个数的值</li>
<li>一个数组中有一种数出现了奇数次，其他数都出现了偶数次怎么找到这种数</li>
<li>怎么把一个int类型的数，提取出最右侧1来</li>
<li>一个数组中有一种数出现了奇数次，其他数都出现了偶数次怎么找到这两种数</li>
</ul>
<h1 id="章节2-链表结构、栈、队列、递归行为、哈希表和有序表-13节"><a href="#章节2-链表结构、栈、队列、递归行为、哈希表和有序表-13节" class="headerlink" title="章节2: 链表结构、栈、队列、递归行为、哈希表和有序表 (13节)"></a>章节2: 链表结构、栈、队列、递归行为、哈希表和有序表 (13节)</h1><ul>
<li>单双向链表节点结构</li>
<li>单双链表如何反转</li>
<li>把给定值删除</li>
<li>java和c++在内存释放上的问题</li>
<li>什么是栈和队列</li>
<li>栈和队列的实际实现（双向链表实现）</li>
<li>栈和队列的实际实现（数组实现）</li>
<li>既然语言都有这些结构和api，为什么还需要手撸练习</li>
<li>如何用队列结构实现栈结构</li>
<li>如何使用栈结构实现队列结构</li>
<li>求数组arr[L..R]中的最大值，怎么用递归方法实现</li>
<li>Master公式</li>
<li>哈希表</li>
</ul>
<h1 id="章节3-归并排序与随机快排-15节"><a href="#章节3-归并排序与随机快排-15节" class="headerlink" title="章节3: 归并排序与随机快排 (15节)"></a>章节3: 归并排序与随机快排 (15节)</h1><ul>
<li>什么是归并排序</li>
<li>归并排序（递归方法实现）</li>
<li>归并排序（非递归方法实现）（1）</li>
<li>归并排序（非递归方法实现）（2）</li>
<li>归并排序时间复杂度分析</li>
<li>根据常见面试题深入理解归并排序</li>
<li>根据常见面试题深入理解归并排序代码解析</li>
<li>在一个数组中求降序对</li>
<li>Partition过程</li>
<li>荷兰国旗问题</li>
<li>快速排序1.0</li>
<li>快速排序2.0</li>
<li>快速排序3.0</li>
<li>怎么解决复杂度</li>
<li>额外空间复杂度怎么估计</li>
</ul>
<h1 id="章节4-比较器与堆-18节"><a href="#章节4-比较器与堆-18节" class="headerlink" title="章节4: 比较器与堆 (18节)"></a>章节4: 比较器与堆 (18节)</h1><ul>
<li>完全二叉树结构</li>
<li>堆是什么</li>
<li>大根堆讲解1</li>
<li>大根堆代码1</li>
<li>大根堆讲解2</li>
<li>答疑</li>
<li>下沉的复杂度是多少</li>
<li>堆排序是什么</li>
<li>堆排序优化1</li>
<li>直观认识完全二叉树</li>
<li>答疑1</li>
<li>怎么保证每一个数再排完序的距离不会超过k</li>
<li>答疑2</li>
<li>比较器（重载比较运算符）</li>
<li>比较器（排序）</li>
<li>比较器（特殊标准排序的结构）</li>
<li>什么情况下可以用语言提供的堆结构，什么情况下必须手动写</li>
<li>什么情况下可以用语言提供的堆结构，什么情况下必须手动写代码实现</li>
</ul>
<h1 id="章节5-trie、桶排序、排序总结-18节"><a href="#章节5-trie、桶排序、排序总结-18节" class="headerlink" title="章节5: trie、桶排序、排序总结 (18节)"></a>章节5: trie、桶排序、排序总结 (18节)</h1><ul>
<li>答疑</li>
<li>前缀树</li>
<li>怎么实现前缀树</li>
<li>答疑</li>
<li>word这个字符串之前加入过几次</li>
<li>有多少字符串是以pre这个字符串作为前缀的</li>
<li>删除</li>
<li>答疑</li>
<li>前缀树是怎么拓展的</li>
<li>不基于比较的排序</li>
<li>基数排序</li>
<li>基数排序代码</li>
<li>基数排序代码拆解</li>
<li>计数排序和基数排序</li>
<li>选择、冒泡、插入排序有没有稳定性</li>
<li>归并、快排、堆排序有没有稳定性</li>
<li>排序算法总结</li>
<li>常见的坑</li>
</ul>
<h1 id="章节6-链表相关面试题-14节"><a href="#章节6-链表相关面试题-14节" class="headerlink" title="章节6: 链表相关面试题 (14节)"></a>章节6: 链表相关面试题 (14节)</h1><ul>
<li>链表问题</li>
<li>快慢指针简介</li>
<li>快慢指针代码</li>
<li>给定一个单链表的头节点head，判断该链表是否为回文机构</li>
<li>将单链表按某值划分成左边小、中间相等、右边大的形式</li>
<li>特殊的单链表节点（用哈希表的方法）</li>
<li>不用哈希表的方法</li>
<li>两个有环也可能无环的单链表，如果相交，返回相交的第一个节点，如果不想交，返回null</li>
<li>两个有环也可能无环的单链表，如果相交，返回相交的第一个节点，如果不想交，返回null代码实现</li>
<li>两个无环链表是否相交</li>
<li>两个无环链表是否相交代码</li>
<li>答疑</li>
<li>两个链表都有环有几种结构</li>
<li>能不能不给单链表的头节点，只给想要删除的节点，就能做到在链表上把这个删掉</li>
</ul>
<h1 id="章节7-二叉树的基本算法-12节"><a href="#章节7-二叉树的基本算法-12节" class="headerlink" title="章节7: 二叉树的基本算法 (12节)"></a>章节7: 二叉树的基本算法 (12节)</h1><ul>
<li>什么叫二叉树</li>
<li>二叉树遍历（什么叫子树）</li>
<li>二叉树遍历是什么意思</li>
<li>二叉树遍历实现</li>
<li>非递归方式实现二叉树的遍历</li>
<li>非递归方式实现二叉树的遍历(前序)</li>
<li>非递归方式实现二叉树的遍历(中序)</li>
<li>非递归方式实现二叉树的遍历(后序)</li>
<li>实现二叉树按层遍历（队列方式）</li>
<li>统计二叉树最大的宽度（用Map）</li>
<li>统计二叉树最大的宽度（不用Map）</li>
<li>二叉树的序列化和反序列化</li>
</ul>
<h1 id="章节8-二叉树的递归套路-16节"><a href="#章节8-二叉树的递归套路-16节" class="headerlink" title="章节8: 二叉树的递归套路 (16节)"></a>章节8: 二叉树的递归套路 (16节)</h1><ul>
<li>如何设计一个打印整棵树的打印函数</li>
<li>给一个二叉树中的某个节点，返回该节点的后继节点1</li>
<li>如果x没有又数</li>
<li>后继</li>
<li>给一个二叉树中的某个节点，返回该节点的后继节点2</li>
<li>给一个二叉树中的某个节点，返回该节点的后继节点代码实现</li>
<li>给定一个如如参数N，代表纸条都从下边上向上方连续对着N次，请从上到下导引所有折痕的方向1</li>
<li>给定一个如如参数N，代表纸条都从下边上向上方连续对着N次，请从上到下导引所有折痕的方向2</li>
<li>二叉树的递归套路1</li>
<li>什么叫平衡树</li>
<li>二叉树的递归套路2</li>
<li>列出所有可能性后，确定到底需要向左树和右树要什么样的信息</li>
<li>给定一颗二叉树的头结点head，任何两个节点之间都存在距离，返回整课二叉树的最大距离</li>
<li>给定二叉树的头节点head，返回这个二叉树最大的二叉树搜索子树的头节点</li>
<li>二叉树递归套路3</li>
<li>排队的最大快乐值</li>
</ul>
<h1 id="章节9-贪心算法-8节"><a href="#章节9-贪心算法-8节" class="headerlink" title="章节9:贪心算法 (8节)"></a>章节9:贪心算法 (8节)</h1><ul>
<li>返回这颗二叉树是不是满二叉树1</li>
<li>返回这颗二叉树是不是满二叉树2</li>
<li>返回a和b的最低公共祖先</li>
<li>贪心算法</li>
<li>贪心算法例子</li>
<li>从头到尾讲一道利用贪心算法求解的题目(1)</li>
<li>从头到尾讲一道利用贪心算法求解的题目(2)</li>
<li>从头到尾讲一道利用贪心算法求解的题目(3)</li>
</ul>
<h1 id="章节10-并查集结构和图相关的算法-10节"><a href="#章节10-并查集结构和图相关的算法-10节" class="headerlink" title="章节10:并查集结构和图相关的算法 (10节)"></a>章节10:并查集结构和图相关的算法 (10节)</h1><ul>
<li>贪心算法求解的标准过程</li>
<li>贪心算法的解题套路</li>
<li>贪心算法的解题套路实战</li>
<li>返回如果点亮str中所有需要点亮的位置，至少需要几盏灯</li>
<li>整分整块金条，怎么分最省铜板</li>
<li>每做完一个项目马上获得的收益可以支持你去做下一个项目不能并行的做项目你最后获得的最大钱数</li>
<li>并查集</li>
<li>isSameSet和union方法的代价越低越好</li>
<li>并查集代码</li>
<li>并查集优化</li>
</ul>
<h1 id="章节11-暴力递归-7节"><a href="#章节11-暴力递归-7节" class="headerlink" title="章节11:暴力递归 (7节)"></a>章节11:暴力递归 (7节)</h1><ul>
<li>合并users返回合并之后的用户数量</li>
<li>图</li>
<li>图的宽度优先&amp;深度优先遍历（1）</li>
<li>图的宽度优先&amp;深度优先遍历（2）</li>
<li>图的拓扑排序算法</li>
<li>最小生成树算法之Kruskal</li>
<li>最小生成树算法之Prim</li>
</ul>
<h1 id="章节12-动态规划-8节"><a href="#章节12-动态规划-8节" class="headerlink" title="章节12:动态规划 (8节)"></a>章节12:动态规划 (8节)</h1><ul>
<li>Dijkstra算法</li>
<li>证明Dijkstra算法</li>
<li>改进后的Dijkstra算法</li>
<li>暴力递归</li>
<li>汉诺塔问题（1）</li>
<li>汉诺塔问题（2）</li>
<li>汉诺塔问题（3）</li>
<li>给你一个栈请你逆序这个栈不能申请额外的数据结构只能使用递归函数如何实现</li>
</ul>
<h1 id="章节13-暴力递归到动态规划1-8节"><a href="#章节13-暴力递归到动态规划1-8节" class="headerlink" title="章节13:暴力递归到动态规划1 (8节)"></a>章节13:暴力递归到动态规划1 (8节)</h1><ul>
<li>二叉树序列化</li>
<li>尝试</li>
<li>打印一个字符串的全部子序列</li>
<li>打印一个字符串的全部排列</li>
<li>打印一个字符串的全部排列不出现重复的排列</li>
<li>从左往右尝试模型1</li>
<li>从左往右尝试模型2</li>
<li>范围上尝试的模型</li>
</ul>
<h1 id="章节14-暴力递归到动态规划2-9节"><a href="#章节14-暴力递归到动态规划2-9节" class="headerlink" title="章节14:暴力递归到动态规划2 (9节)"></a>章节14:暴力递归到动态规划2 (9节)</h1><ul>
<li>课前例题1讲解</li>
<li>课前例题2讲解</li>
<li>N皇后</li>
<li>N皇后方法1</li>
<li>N皇后方法2</li>
<li>回答问题</li>
<li>怎么尝试一件事</li>
<li>动态规划</li>
<li>经典动态规划</li>
</ul>
<h1 id="章节15-暴力递归到动态规划3-8节"><a href="#章节15-暴力递归到动态规划3-8节" class="headerlink" title="章节15:暴力递归到动态规划3 (8节)"></a>章节15:暴力递归到动态规划3 (8节)</h1><ul>
<li>返回让所有咖啡杯变干净的最早完成时间</li>
<li>返回所有的路径中最小的路径和(1)</li>
<li>返回所有的路径中最小的路径和(2)</li>
<li>解题规律</li>
<li>值为正数不重复每个值代表一种面值的货币每种面值的货币求组成 aim 的方法数(1)</li>
<li>值为正数不重复每个值代表一种面值的货币每种面值的货币求组成 aim 的方法数(2)</li>
<li>值为正数不重复每个值代表一种面值的货币每种面值的货币求组成 aim 的方法数(3)</li>
<li>枚举行为优化</li>
</ul>
<h1 id="章节16-暴力递归到动态规划4-9节"><a href="#章节16-暴力递归到动态规划4-9节" class="headerlink" title="章节16:暴力递归到动态规划4 (9节)"></a>章节16:暴力递归到动态规划4 (9节)</h1><ul>
<li>返回需要至少多少张贴纸可以完成任务方法1(1)</li>
<li>返回需要至少多少张贴纸可以完成任务方法1(2)</li>
<li>返回需要至少多少张贴纸可以完成任务方法2</li>
<li>总结</li>
<li>两个字符串的最长公共子序列问题(1)</li>
<li>两个字符串的最长公共子序列问题(2)</li>
<li>两个字符串的最长公共子序列问题(13)</li>
<li>返回让所有咖啡杯变干净的最早完成时间方法1</li>
<li>返回让所有咖啡杯变干净的最早完成时间方法2</li>
</ul>
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>冯·诺依曼计算机结构</title>
    <url>/2024/10/08/20241008-01.html</url>
    <content><![CDATA[<p><img src="/./assets/20241008/13377f019c8449e8a261ccda1e94c422.png" alt="冯诺依曼结构"></p>
<h1 id="入-出-存-算-控"><a href="#入-出-存-算-控" class="headerlink" title="入&#x2F;出&#x2F;存&#x2F;算&#x2F;控"></a>入&#x2F;出&#x2F;存&#x2F;算&#x2F;控</h1><h1 id="采用二进制表示数据和指令"><a href="#采用二进制表示数据和指令" class="headerlink" title="采用二进制表示数据和指令"></a>采用二进制表示数据和指令</h1><ul>
<li>以同等地位在存储器中，按地址寻访</li>
<li>指令由操作码和地址码组成</li>
<li>指令按顺序存放和执行，也可改变指令顺序</li>
</ul>
<h1 id="采用存储程序方式"><a href="#采用存储程序方式" class="headerlink" title="采用存储程序方式"></a>采用存储程序方式</h1><ul>
<li>事先编制好程序，并与所需数据预先存入主存</li>
<li>控制器自动地、连续地从存储器取出指令并执行</li>
</ul>
<p><img src="/./assets/20241008/1517ab65036e4c40866858e3695e8f5e.png" alt="冯诺依曼结构"></p>
<h1 id="冯诺依曼结构的模型机"><a href="#冯诺依曼结构的模型机" class="headerlink" title="冯诺依曼结构的模型机"></a>冯诺依曼结构的模型机</h1><p><img src="/./assets/20241008/2d0e2d27f7f1466e98160b71b38880fa.png" alt="冯诺依曼结构模型机"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>现代计算机组织结构</title>
    <url>/2024/10/08/20241008-02.html</url>
    <content><![CDATA[<h1 id="现代计算机组织结构"><a href="#现代计算机组织结构" class="headerlink" title="现代计算机组织结构"></a>现代计算机组织结构</h1><ul>
<li>入&#x2F;出&#x2F;存&#x2F;算&#x2F;控</li>
<li>采用二进制表示数据和指令</li>
<li>采用存储程序方式</li>
<li>CPU：运算器与控制器合并到微处理器</li>
<li>以存储器为核心，IO设备尽可能绕过CPU</li>
</ul>
<p><img src="/./assets/20241008/b4efaa25cd38480f82645db049713342.png" alt="现代计算机结构"></p>
<h1 id="以存储器为中心的计算机结构"><a href="#以存储器为中心的计算机结构" class="headerlink" title="以存储器为中心的计算机结构"></a>以存储器为中心的计算机结构</h1><p><img src="/./assets/20241008/41d944c0d6d14a8ca5ed1a3ea84a0e28.png" alt="以存储器为中心的计算机结构"></p>
<h1 id="现代计算机组织结构-1"><a href="#现代计算机组织结构-1" class="headerlink" title="现代计算机组织结构"></a>现代计算机组织结构</h1><p><img src="/./assets/20241008/3ef82923745247f199de104d1ac0c1e4.png" alt="现代计算机组织结构"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的工作过程</title>
    <url>/2024/10/08/20241008-03.html</url>
    <content><![CDATA[<h1 id="从源文件到可执行文件"><a href="#从源文件到可执行文件" class="headerlink" title="从源文件到可执行文件"></a>从源文件到可执行文件</h1><ol>
<li>预处理阶段</li>
</ol>
<ul>
<li>高级语言：C&#x2F;C++、Java、GO</li>
<li>删注释；引入包含文件</li>
</ul>
<ol start="2">
<li>编译阶段</li>
</ol>
<ul>
<li>汇编语言：指令代码</li>
</ul>
<ol start="3">
<li>汇编阶段</li>
</ol>
<ul>
<li>机器语言：二进制编码</li>
</ul>
<ol start="4">
<li>链接阶段</li>
</ol>
<ul>
<li>+库函数</li>
</ul>
<p><img src="/./assets/20241008/e4e1d30288de4318a116521fd9a8cc3d.png" alt="计算机的工作过程"></p>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机的性能指标</title>
    <url>/2024/10/10/20241010-01.html</url>
    <content><![CDATA[<h1 id="机器字长"><a href="#机器字长" class="headerlink" title="机器字长"></a>机器字长</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>也叫基本字长，参与运算的二进制数据的位数，决定了寄存器、ALU、数据总线位数，代表了运算精度</p>
<h2 id="易混淆概念"><a href="#易混淆概念" class="headerlink" title="易混淆概念"></a>易混淆概念</h2><ul>
<li>机器字长：一般等于内部寄存器的大小</li>
<li>指令字长：一个指令包含的二进制码的位数</li>
<li>存储字长：存储单元的二进制码的长度&#x2F;位数</li>
</ul>
<p>注意：所有字长都必须是字节的整数倍。</p>
<p><img src="/./assets/20241010/71d36dda134e40c8b96ea996496f097f.png" alt="机器字长"></p>
<h1 id="主存容量"><a href="#主存容量" class="headerlink" title="主存容量"></a>主存容量</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>一般指主存的最大容量，单位是字节Byte，运行时程序和数据都在主存中，主存容量越大，可运行的程序就越多，MAR位数（但不一定是当前机器安装内存的容量）决定了可寻址范围的最大值。</p>
<p><img src="/./assets/20241010/624d4dca02014be5875079492bd2f194.png" alt="主存容量"></p>
<h1 id="运算速度"><a href="#运算速度" class="headerlink" title="运算速度"></a>运算速度</h1><h2 id="吞吐量："><a href="#吞吐量：" class="headerlink" title="吞吐量："></a>吞吐量：</h2><p>单位时间内处理的请求数量，由如下因素决定：</p>
<ul>
<li>信息输入内存的速度</li>
<li>CPU取指令的速度</li>
<li>数据取出&#x2F;存入内存的速度</li>
<li>从内存转出到外部设备的速度</li>
</ul>
<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>从用户发送请求到收到响应经过的时间，，由如下因素决定：</p>
<ul>
<li>CPU时间（运行程序花费的时间）</li>
<li>等待时间（磁盘访问&#x2F;主存访问&#x2F;IO操作&#x2F;OS开销&#x2F;网络传输）</li>
</ul>
<h2 id="CPU时钟周期"><a href="#CPU时钟周期" class="headerlink" title="CPU时钟周期"></a>CPU时钟周期</h2><p>单个动作所花费的时间</p>
<ul>
<li>节拍脉冲或T周期，即主频的倒数</li>
<li>CPU中最小的时间单位，每个动作至少一个时钟周期</li>
<li>单位：秒</li>
</ul>
<h2 id="主频（CPU时钟频率）"><a href="#主频（CPU时钟频率）" class="headerlink" title="主频（CPU时钟频率）"></a>主频（CPU时钟频率）</h2><p>单位时间完成基本动作的数量</p>
<ul>
<li>机器内部主时钟的频率</li>
<li>主频越高花费时间越短，执行指令速度越快</li>
<li>单位：Hz（赫兹），即次数&#x2F;秒</li>
<li>时钟周期 &#x3D; 1&#x2F;主频</li>
</ul>
<h2 id="CPI（Clock-cycle-Per-Instruction）"><a href="#CPI（Clock-cycle-Per-Instruction）" class="headerlink" title="CPI（Clock cycle Per Instruction）"></a>CPI（Clock cycle Per Instruction）</h2><p>执行一条指令所需的时钟周期数</p>
<h2 id="CPU执行时间"><a href="#CPU执行时间" class="headerlink" title="CPU执行时间"></a>CPU执行时间</h2><p>即运行一个程序所花费的时间，&#x3D; CPU时钟周期数&#x2F;主频&#x3D;（指令条数 * CPI）&#x2F;主频</p>
<p>三要素（相互制约）：</p>
<ul>
<li>主频（时钟频率）</li>
<li>每条指令所用的时钟周期数（CPI）</li>
<li>指令条数</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li>MIPS：Million Instructions Per Second &#x3D; 指令条数&#x2F;（执行时间*10^6）</li>
<li>MFLOPS：Mega Floating-point Operations PS &#x3D; 浮点数操作次数&#x2F;(执行时间*10^6)</li>
<li>GFLOPS：Giga Floating-point Operations PS &#x3D; 浮点数操作次数&#x2F;(执行时间*10^9)</li>
<li>TFLOPS：Tera Floating-point Operations PS &#x3D; 浮点数操作次数&#x2F;(执行时间*10^12)</li>
</ul>
]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL介绍</title>
    <url>/2024/10/10/20241010-02.html</url>
    <content><![CDATA[<p>PostgreSQL是一个功能强大的 <strong>开源</strong> 的关系型数据库，底层基于C实现。</p>
<p>PostgreSQL的开源协议和Linux内核版本的开源协议是一样的。也就是BSD协议，这个协议基本和MIT开源协议一样，就是你可以对PostgreSQL进行一些封装，然后商业化来收费。</p>
<p>PostgreSQL的名字咋来的：之前叫Ingres，后面为了解决一些Ingres中的一些问题，作为后面的Ingres，就起名叫Postgre。</p>
<p>PostgreSQL版本迭代的速度比较快，现在最新的正式的发布版本，已经到了15.RELEASE。</p>
<p>PostgreSQL的版本选择一般有两种：</p>
<ul>
<li>如果为了稳定的运行，推荐使用12.x版本。</li>
<li>如果想体验新特性，推荐使用14.x版本。</li>
</ul>
<p>PostgreSQL允许跨版本升级，而且没有什么大问题。</p>
<p>PostgreSQL社区特别活跃，基本是三个月一发版，也就意味着很多常见的BUG都可以得到及时的修复。</p>
<p>PostgreSQL其实在国外使用的比较多，国内暂时还是以MySQL为主。</p>
<p>但是国内很多国产数据库都是基于PostgreSQL做的二次封装：比如华为GaussDB，还有腾讯的Tbase等。</p>
<p>甚至很多公司原来玩的Oracle，直接平转到PostgreSQL，同时国内的很多云厂商都支持PostgreSQL了。</p>
<p>PostgreSQL因为开源，所以有很多做数据迁移的工具，可以快速的从MySQL，SQLServer，Oracle直接平转到PostgreSQL，比如pgloader这样的数据迁移工具。</p>
<p>PostgreSQL的官方社区地址：<a href="https://www.postgresql.org/">https://www.postgresql.org/</a></p>
<p>PostgreSQL的国内社区地址：<a href="http://www.postgres.cn/v2/home">http://www.postgres.cn/v2/home</a></p>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL和MySQL的区别</title>
    <url>/2024/10/10/20241010-03.html</url>
    <content><![CDATA[<p>技术没有好坏之分，主要看一下是否符合业务的需要，能否解决业务需求；其次也要看社区的活跃度以及更新的频次。</p>
<p>MySQL不支持的几点内容：</p>
<ul>
<li>MySQL的数据类型不够丰富；</li>
<li>MySQL不支持序列概念（Sequence）；</li>
<li>使用MySQL时，网上比较好用的插件；</li>
<li>MySQL的性能优化监控工具不是很多，定位问题的成本是比较高；</li>
<li>MySQL的主从复制没有一个官方的同步策略，同步问题难以解决；</li>
<li>MySQL虽然开源但不够彻底。</li>
</ul>
<p>PostgreSQL相对MySQL上述问题的特点：</p>
<ul>
<li>PostgreSQL的数据类型嘎嘎丰富；</li>
<li>PostgreSQL是有序列的概念的；</li>
<li>PostgreSQL的插件特别丰富；</li>
<li>PostgreSQL支持主从复制的同步操作，可以实现数据的零丢失；</li>
<li>PostgreSQL的MVCC实现和MySQL不大一样（PostgreSQL一行数据会存储多个版本，最多可以存储40亿个事务版本）。</li>
</ul>
]]></content>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
</search>
